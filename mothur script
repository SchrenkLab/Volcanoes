#mothur SOP from P. Schloss
#H Miller
#2017.11.27

#QC fastq files FIRST

# Open a secure shell (SSH) connection to MSU gateway node, hpcc.msu.edu.  In Linux, Unix or Mac OSX, simply type the following in a terminal window:
ssh -X [username]@hpcc.msu.edu

# Then, ssh to a development node with (low) usage.  Refer to HPCC wiki for descriptions of the nodes and how many processors (CPUs) each support (https://wiki.hpcc.msu.edu/display/hpccdocs/Connecting+to+the+HPCC)
ssh -X [node-name]

# from within HPCC after accessing a development node
[mill2735@dev-intel16-k80 ~]$ module load mothur

#RESPONSE: This is the multi-threaded non-MPI version of Mothur. See: https://wiki.hpcc.msu.edu/display/Bioinfo/Mothur+-+MPI+versus+Non-MPI+Versions

[mill2735@dev-intel16-k80 ~]$ mothur

###### make sure inputdir is the location of the raw data on HPCC: REFERENCE FOLDER HEIRARCHY...16S_rRNA/data/raw; 16S_rRNA/data/MSU-RTSF_V4/2018.../folders of fastq.files
mothur > make.file(inputdir=data/raw/, type=fastq, prefix=stability)
mothur > make.contigs(file=stability.files, processors=8)
mothur > summary.seqs(fasta=stability.trim.contigs.fasta)

mothur > screen.seqs(fasta=stability.trim.contigs.fasta, group=stability.contigs.groups, summary=stability.trim.contigs.summary, maxambig=0, maxlength=275)

mothur > get.current()
#mothur > summary.seqs(fasta=stability.trim.contigs.good.fasta)
#mothur > summary.seqs(fasta=current)
#mothur > summary.seqs()

mothur > unique.seqs(fasta=stability.trim.contigs.good.fasta)
mothur > count.seqs(name=stability.trim.contigs.good.names, group=stability.contigs.good.groups)
mothur > summary.seqs(count=stability.trim.contigs.good.count_table)
mothur > pcr.seqs(fasta=silva.v128.fasta, start=11894, end=25319, keepdots=F, processors=8)
#mothur > rename.file(input=silva.bacteria.pcr.fasta, new=silva.v4.fasta)

mothur > summary.seqs(fasta=silva.v128.fasta)
mothur > align.seqs(fasta=stability.trim.contigs.good.unique.fasta, reference=silva.v128.fasta)
mothur > summary.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table)

mothur > screen.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table, summary=stability.trim.contigs.good.unique.summary, start=1968, end=11550, maxhomop=8)

mothur > summary.seqs(fasta=current, count=current)
mothur > filter.seqs(fasta=stability.trim.contigs.good.unique.good.align, vertical=T, trump=.)
mothur > unique.seqs(fasta=stability.trim.contigs.good.unique.good.filter.fasta, count=stability.trim.contigs.good.good.count_table)
mothur > pre.cluster(fasta=stability.trim.contigs.good.unique.good.filter.unique.fasta, count=stability.trim.contigs.good.unique.good.filter.count_table, diffs=2)
mothur > chimera.vsearch(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)
mothur > remove.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)

mothur > summary.seqs(fasta=current, count=current)

mothur > classify.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=trainset9_032012.pds.fasta, taxonomy=trainset9_032012.pds.tax, cutoff=80)
mothur > remove.lineage(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota)
mothur > summary.tax(taxonomy=current, count=current)

######ASSESSING ERROR RATES
# This is a MOCK community, to be used in gauging error rates????
#mothur > get.groups(count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, groups=Mock)

#mothur > seq.error(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, reference=HMP_MOCK.v35.fasta, aligned=F)

mothur > dist.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, cutoff=0.03)
mothur > cluster(column=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.dist, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table)
mothur > make.shared(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, label=0.03)
mothur > rarefaction.single(shared=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.shared)

# Use to remove MOCK samples
#mothur > remove.groups(count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, groups=Mock)

# Small datasets: clustering option/code
#mothur > dist.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, cutoff=0.03)
#mothur > cluster(column=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.dist, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table)

# Large datasets
mothur > cluster.split(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03)

mothur > make.shared(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, label=0.03)
mothur > classify.otu(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, label=0.03)

###PHYLOTYPES
mothur > phylotype(taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy)
mothur > make.shared(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.tx.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, label=1)
mothur > classify.otu(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.tx.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, label=1)

##PHYLOGENETIC TREES
mothur > dist.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, output=lt, processors=8)
mothur > clearcut(phylip=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.phylip.dist)

#######ANALYSIS######
mothur > rename.file(count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, tree=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.phylip.tre, shared=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.shared, constaxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.0.03.cons.taxonomy)
mothur > count.groups(shared=stability.opti_mcc.shared)
mothur > sub.sample(shared=stability.opti_mcc.shared, size=[SMALLEST SAMPLE WITH "####" SEQUENCES])

# OTU-ANALYSIS
#ALPHA DIVERSITY
mothur > rarefaction.single(shared=stability.opti_mcc.shared, calc=sobs, freq=100)
mothur > summary.single(shared=stability.opti_mcc.shared, calc=nseqs-coverage-sobs-invsimpson, subsample=[SAME #### AS ABOVE])

#BETA DIVERSITY
mothur > heatmap.bin(shared=stability.opti_mcc.0.03.subsample.shared, scale=log2, numotu=50)
mothur > dist.shared(shared=stability.opti_mcc.shared, calc=thetayc-jclass, subsample=[SAME #### AS ABOVE])
mothur > heatmap.sim(phylip=stability.opti_mcc.thetayc.0.03.lt.ave.dist)
mothur > heatmap.sim(phylip=stability.opti_mcc.jclass.0.03.lt.ave.dist)

#VENN DIAGRAGM
mothur > venn(shared=stability.opti_mcc.0.03.subsample.shared, groups=[F3D0-F3D1-F3D2-F3D3])

#DENDROGRAM: need visualization software like TreeView or FigTree
mothur > tree.shared(phylip=stability.opti_mcc.thetayc.0.03.lt.ave.dist)
mothur > parsimony(tree=stability.opti_mcc.thetayc.0.03.lt.ave.tre, group=mouse.time.design,  groups=all)

#PLOTS
mothur > pcoa(phylip=stability.opti_mcc.thetayc.0.03.lt.ave.dist)
mothur > nmds(phylip=stability.opti_mcc.thetayc.0.03.lt.ave.dist)
mothur > nmds(phylip=stability.opti_mcc.thetayc.0.03.lt.ave.dist, mindim=3, maxdim=3)
mothur > amova(phylip=stability.opti_mcc.thetayc.0.03.lt.ave.dist, design=mouse.time.design)
mothur > homova(phylip=stability.opti_mcc.thetayc.0.03.lt.ave.dist, design=mouse.time.design)







